{
  "name": "Data-manager",
  "tagline": "Simple data manager for nested data and dot notation access",
  "body": "# Data Manager\r\n[![Latest Version](https://img.shields.io/github/release/chrismichaels84/data-manager.svg?style=flat-square)](https://github.com/chrismichaels84/data-manager/releases)\r\n[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](LICENSE.md)\r\n[![Build Status](https://img.shields.io/travis/chrismichaels84/data-manager/master.svg?style=flat-square)](https://travis-ci.org/chrismichaels84/data-manager)\r\n[![Coverage Status](https://coveralls.io/repos/chrismichaels84/data-manager/badge.svg?branch=master)](https://coveralls.io/r/chrismichaels84/data-manager?branch=master)\r\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/chrismichaels84/data-manager/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/chrismichaels84/data-manager/?branch=master)\r\n[![Total Downloads](https://img.shields.io/packagist/dt/michaels/data-manager.svg?style=flat-square)](https://packagist.org/packages/michaels/data-manager)\r\n\r\n[![SensioLabsInsight](https://insight.sensiolabs.com/projects/3ef3b9a4-6078-4ddf-bf0d-c84dac87f37a/big.png)](https://insight.sensiolabs.com/projects/3ef3b9a4-6078-4ddf-bf0d-c84dac87f37a)\r\n\r\nSimple data manager for nested data, dot notation access, extendability, and container interoperability.\r\n\r\nThis project began as a three part tutorial series which can be found at http://phoenixlabstech.org/2015/04/17/building-a-data-manager/\r\n\r\n## Goals\r\n  * Light weight\r\n  * Fluent, simple, clear API\r\n  * Manage any data type (closure, object, primitives, etc.)\r\n  * Manage nested data via dot-notation\r\n  * Manage nested data via magic methods ($manager->one()->two()->three)\r\n  * Be composable - integrate into current containers via traits\r\n  * Be extensible.\r\n  * Allow for protected data (immutable)\r\n  * Test coverage, PSR compliant, [container interoperability](https://github.com/container-interop/container-interop), and best practices\r\n\r\n## Extras\r\nOn top of being a powerful data-manager, there are traits that add features.\r\nThey are not documented here, but see other readmes for:\r\n  * [IoC Container](ioc.md): Use Manager as a simple but powerful Dependency Injection Container. Includes\r\n    * Resolving dependencies from classnames, closures, eager loading, and more,\r\n    * Creating singletons,\r\n    * Configuring dependencies for dependencies,\r\n    * Fallbacks, preparing objects, and more.\r\n  * Use Manager as a configuration bank, complete with defaults.\r\n  * Load configuration files (php, yaml, json, xml, and custom)\r\n  * [Collections](collections.md) for extra array-helper methods (based on [Arrayzy](https://github.com/bocharsky-bw/Arrayzy))\r\n    \r\n## Install\r\nVia Composer\r\n``` bash\r\n$ composer require michaels/data-manager\r\n```\r\n\r\n## Getting Started\r\nManager does exactly what you would expect: it *manages* complex items such as config data, arrays, and closures.\r\nThe best way to get started is simply instantiate `Michaels\\Manager\\Manager`\r\n\r\n```php\r\n$manager = new Michaels\\Manager\\Manager([\r\n    'some' => [\r\n        'starting' => [\r\n            'data' => 'here (optional)'\r\n        ]\r\n    ]\r\n]);\r\n// Note, you may initialize Manager with an array or any instance of Traversable (like Manager itself)\r\n\r\n/* Basic Usage. All works with dot notation as well */\r\n$manager->add('name', 'value');\r\n$manager->add('some.nested.data', 3); // Use dot notation for namespacing or nesting\r\n$manager->get('name'); // 'value'\r\n$manager->get('doesntexist', 'fallback'); // 'fallback'\r\n$manager->get('doesntexist') // throws an ItemNotFoundException with no fallback\r\n$manager->getIfHas('doesntexist') // returns a NoItemFoundMessage instead of a script-stopping exception\r\n$manager->getAll(); // returns array of all items\r\n$manager->all(); // returns array of all items\r\n$manager->exists('name'); // true\r\n$manager->exists('some.starting.data'); // true\r\n$manager->exists('nope'); // false\r\n$manager->has('something'); // alias of exist\r\n$manager->set('name', 'new-value'); // updates item\r\n$manager->remove('some.starting.data');\r\n$manager->isEmpty(); // true or false\r\n$manager->toJson(); // returns json of all items\r\necho $manager; // returns json string of all items\r\n$manager->reset($array); // rebuild with new items\r\n$manager->clear(); // empty the manager\r\n\r\n/* You can also use $manager as an array or in loops */\r\n$manager['some']['starting']['data']; // 'here (optional)'\r\n//etc\r\n\r\nforeach ($manager as $item => $value) {\r\n    // do whatever your heart desires\r\n}\r\n\r\n/* You may also push elements onto an array */\r\n$manager->set('a.b', []);\r\n$manager->push('a.b', 'c', 'd', 'e');\r\n$manager->get('a.b'); // ['c', 'd', 'e']\r\n\r\n/* Finally, you may manage values using magic methods */\r\n$manager->some()->starting()->data; // 'here (optional)'\r\n$manager->some()->item = 'item'; // sets some.item = 'item'\r\n$manager->some()->item()->drop(); // deletes some.item\r\n\r\n// Note that levels are called as a method with no params. The data is then called, updated, or set as a property.\r\n```\r\n\r\n## Protecting Data\r\nYou can also guard any item or nest from being changed. Simply,\r\n```php\r\n$manager->protect('some.data'); //now some.data and everything under it cannot be altered\r\n$manager->set('some.data.here', 'new-value'); // throws an exception\r\n```\r\n\r\n## Merging Defaults Into Current Dataset\r\nWhen using Manager to store configuration data, it is important to be able to set defaults.\r\nYou can merge an array of defaults into manager via `loadDefaults(array $defaults)`\r\n\r\nImagine your configuration starts like\r\n```php\r\n$manager = new Manager([\r\n    'name' => 'My Awesome App',\r\n    'site' => [\r\n        'url' => 'https://youwishyouwerethiscool.com/',\r\n        'protocol' => 'https',\r\n    ]\r\n]);\r\n```\r\n\r\nBut your app needs `site.assets` for the assets directory. Simply\r\n```php\r\n$manager->loadDefaults([\r\n    'site' => [\r\n        'url' => 'http://the_default_url.com/',\r\n        'assets' => '/assets',\r\n    ],\r\n    'database' => \"mysql\"\r\n]);\r\n```\r\n\r\nAnd now, your configuration looks like\r\n```php\r\n    'name' => 'My Awesome App',\r\n    'site' => [\r\n        'url' => 'https://youwishyouwerethiscool.com/'\r\n        'protocol' => \"https\",\r\n        'assets' => '/assets'\r\n    ],\r\n    'database' => \"mysql\"\r\n```\r\n\r\nA couple of things to keep in mind:\r\n  * This works recursively and as far down as you want.\r\n  * If any value is set before loading defaults, that value is preserved\r\n  * If a starting value is set to an array (`one.two = []`) and a default lives beneath (`one.two.three = default`), then the default **will** be set.\r\n  * On the other hand, if the value exists and is **not** an array, the default will be ignored. \r\n  (`one.two = 'something'`) In this case, there is no `one.two.three`, even after loading defaults.\r\n\r\n## Using Manager Traits\r\nIf you have your own container objects and want to add Manager functionality to them, you may import traits into your class.\r\n\r\nThere are 3 Traits that make up Manager:\r\n  1. `ManagesItemsTrait` fulfills `ManagesItemsInterface` and adds most functionality. Look at the interface for full list.\r\n  2. `ArrayableTrait` makes the class usable as an array (`$manager['some']['data']`) or in loops and such\r\n  3. `ChainsNestedItemsTrait` allows you to use fluent properties to manage data (`$manager->one()->two()->three = 'three`)\r\n\r\nAnd 3 extra Traits to give additional functionality:\r\n  1. `CollectionTrait` returns collections with all sorts of [array helpers](https://github.com/bocharsky-bw/Arrayzy)\r\n  2. `ManagesIocTrait` turns Manager into a simple, but complete IoC or Dependency Injection manager\r\n  3. `LoadsFilesTrait` allows Manager to load data from config files.\r\n  \r\nEach of these traits is documented below. To include the functionality simply `use` the trait.\r\nit is possible to use ALL traits together in one class, though I don't know why you would need to.\r\n\r\n*NOTE THAT* all traits depend on ManagesItemsTrait. If you try to use ChainsNestedItemsTrait or ArrayableTrait without ManagesItemsTrait, you will get all sorts of errors.\r\n\r\n```php\r\n/* An example for UberManager */\r\nclass MyContainer {\r\n    use Michaels\\Manager\\Traits\\ManagesItemsTrait;\r\n    use Michaels\\Manager\\Traits\\ChainsNestedItemsTrait;\r\n    use Michaels\\Manager\\Traits\\ArrayableTrait;\r\n    use Michaels\\Manager\\Traits\\CollectionTrait; \r\n    use Michaels\\Manager\\Traits\\LoadsFilesTrait;\r\n    use Michaels\\Manager\\Traits\\ManagesIocTrait;\r\n\r\n    // Your stuff here. And you may override anything you like.\r\n    // Remember to add a constructor if you want :)\r\n}\r\n```\r\n\r\nIf you do use a trait, and want to initialize your class at construction, use the `initManager()` method.\r\n\r\n```php\r\nclass MyClass\r\n{\r\n    use ManagesItemsTrait;\r\n    \r\n    public function __construct($beginningItems)\r\n    {\r\n        $this->initManager($beginningItems);\r\n    }\r\n}\r\n\r\n```\r\n\r\ninitManager() is used so it doesn't conflict with user-defined init() methods.\r\n\r\n#### Two important notes\r\n  1. Using `ManagesItemsTrait` does not implement ArrayAccess, so you can't use your manager as an array (`$manager['one']`). Use `ArrayableTrait` for that.\r\n  2. `ManagesItemsTrait` no longer includes a constructor. It is just best not to include constructors in traits. It is recommended (though not necessary) to use a constructor in your class:\r\n```php\r\npublic function __construct($items = [])\r\n{\r\n    $this->initManager($items);\r\n}\r\n```\r\n\r\nYou may also use the **tests** under `tests/traits` to test your integrated functionality. You may have to grab these through cloning the repo. composer usually won't include tests in your `require`\r\n## Additional Features\r\n\r\n### Collections\r\nRight now, you may choose to return a `MutableArray` which comes with a lot of helpers.\r\nSimply include `Michaels\\Manager\\Traits\\CollectionTrait` into your class. By default, `get()` and `getAll()` will return collections.\r\nThese collections behave *identically* to arrays, but come with extra methods. See [Arrayzy](https://github.com/bocharsky-bw/Arrayzy) for a full api.\r\n\r\nIt is possible to chain things for brevity:\r\n```php\r\n$value = $manager->get('one.two.three')->walk(function(){});\r\n```\r\nIn this case, `walk()` is part of the collection and will apply the callback to each value, then return the updated contents.\r\n\r\nYou may also disable this by `$manager->useCollections = false`\r\n\r\n### Loading Files\r\nManager also gives you the ability to load file data into the Manager. \r\nA good use case for this is loading configuration data out of different configuration files.\r\n\r\n  1. `use LoadsFilesTrait`\r\n  2. Use `$manager->loadFiles($files)` to load a group of files. \r\n  \r\nThe `$files` argument can be a `FileBag` object or an array of:\r\n  1. `\\SplFileInfo` objects\r\n  2. Valid paths (`__DIR__.'/some/path/here.json'`)\r\n  \r\nFor more powerful uses (like loading entire directories or advanced filesystem searches), you may also us [Symfony's Finder Component](https://github.com/symfony/Finder).\r\n```php\r\n$finder = new Finder();\r\n$finder->files()->in(__DIR__);\r\n$manager->loadFiles($finder);\r\n```\r\n\r\nThe data will be added to manager under the filename. So, if you load `config.json` you could `$manager->get('config.item')`;\r\nIt is possible to set a custom namespace for each file:\r\n```php\r\n$manager->loadFiles([\r\n  __DIR__.'/path/to/filename.json', // auto namespaces under filename\r\n  [new \\SplFileInfo('path/to/file.yaml'), 'namespace'], // will namespace like ->get('namespace.item')\r\n  [__DIR__.'/path/to/another.php, 'another'] // will namespace like ->get('another.item')\r\n]);\r\n```\r\n\r\n#### Adding a Decoder\r\nManager supports Yaml, Json and PHP file formats out of the box. To use the Yaml decoder, you must require the Symfony Yaml Component in your composer.json file.\r\n\r\nIf you have special files not covered by the decoders available in Manager, you can also create your own and add it to the Manager prior to decoding the files.\r\nSimply implement the `Contracts\\DecoderInterface` and return an array of data (not namespaced).\r\nFor an example custom decoder, have a look at the `\\CustomXmlDecoder` class in the `/Decoders` directory. \r\n\r\nOnce you've created your custom decoder, you can add it with the `$manager->addDecoder()` method *before* loading any file data. \r\n\r\n### Managing Dependencies\r\nPlease see [ioc.md](ioc.md) for details.\r\n\r\n## Some Advanced Features\r\nBy default, Manager stores all the items in an `$items` property. \r\nIf you are using the `ManagesItemsTrait` and want to use an internal property besides `$items` to avoid collisions, you have two options:\r\n\r\n  1. Use `$manager->setItemsName($nameOfProperty)` either in your constructor or before you add anything\r\n  2. Set the `$dataItemsName` property to a string of the new property name. Then be sure to call `initManager()` in your constructor.\r\n\r\n## Exceptions\r\nIf you try to `get()` an item that doesn't exist, and there is no fallback, an `ItemNotFoundException` will be thrown.\r\n\r\nIf you do not want an exception, use `getIfHas($alias)` which will return a `NoItemFoundMessage` object, or use a fallback value `get($item, $fallback)`.\r\n\r\nIf you try to nest under an existing value that is not an array, an `NestingUnderNonArrayException` will be thrown.\r\n```php\r\n$manager = new Manager(['one' => 1]);\r\n$manager->add(\"one.two\", \"two-value\"); // exception\r\n```\r\n\r\nIf you try to alter a protected item, a `ModifyingProtectedItemException` will be thrown.\r\n\r\nSee /exceptions for more\r\n\r\n## Upgrading\r\nNote that between 0.8.2 and 0.8.3, the `__constuct()` method was removed from `ManagesItemsTrait`. If you are using that trait directly, you should implement your own. \r\n\r\nSee `Michaels\\Manager\\Manager` for an example.\r\n\r\n## Interoperability\r\nData Manager is [PSR compliant](http://www.php-fig.org/) and [Container Interoperability](https://github.com/container-interop/container-interop) compliant. Any oversights, please let me know.\r\n\r\n## Testing\r\nWe try for at least 80% test coverage.\r\n``` bash\r\n$ phpunit\r\n```\r\n\r\nYou may also use the **tests** under `tests/traits` to test your integrated functionality. You may have to grab these through cloning the repo. composer usually won't include tests in your `require`\r\n\r\n## Contributing\r\nContributions are welcome and will be fully credited. Please see [CONTRIBUTING](CONTRIBUTING.md) for details.\r\n\r\n## Security\r\nIf you discover any security related issues, please email chrismichaels84@gmail.com instead of using the issue tracker.\r\n\r\n## Credits\r\n- [Michael Wilson](https://github.com/chrismichaels84)\r\n- [Scott](https://github.com/smolinari)\r\n- Open an issue to join in!\r\n\r\n## License\r\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}